/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Technician as PrismaTechnician,
  MaintenanceRecord as PrismaMaintenanceRecord,
} from "@prisma/client";

export class TechnicianServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TechnicianCountArgs, "select">
  ): Promise<number> {
    return this.prisma.technician.count(args);
  }

  async technicians(
    args: Prisma.TechnicianFindManyArgs
  ): Promise<PrismaTechnician[]> {
    return this.prisma.technician.findMany(args);
  }
  async technician(
    args: Prisma.TechnicianFindUniqueArgs
  ): Promise<PrismaTechnician | null> {
    return this.prisma.technician.findUnique(args);
  }
  async createTechnician(
    args: Prisma.TechnicianCreateArgs
  ): Promise<PrismaTechnician> {
    return this.prisma.technician.create(args);
  }
  async updateTechnician(
    args: Prisma.TechnicianUpdateArgs
  ): Promise<PrismaTechnician> {
    return this.prisma.technician.update(args);
  }
  async deleteTechnician(
    args: Prisma.TechnicianDeleteArgs
  ): Promise<PrismaTechnician> {
    return this.prisma.technician.delete(args);
  }

  async findMaintenanceRecords(
    parentId: string,
    args: Prisma.MaintenanceRecordFindManyArgs
  ): Promise<PrismaMaintenanceRecord[]> {
    return this.prisma.technician
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .maintenanceRecords(args);
  }
}
