/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Technician } from "./Technician";
import { TechnicianCountArgs } from "./TechnicianCountArgs";
import { TechnicianFindManyArgs } from "./TechnicianFindManyArgs";
import { TechnicianFindUniqueArgs } from "./TechnicianFindUniqueArgs";
import { CreateTechnicianArgs } from "./CreateTechnicianArgs";
import { UpdateTechnicianArgs } from "./UpdateTechnicianArgs";
import { DeleteTechnicianArgs } from "./DeleteTechnicianArgs";
import { MaintenanceRecordFindManyArgs } from "../../maintenanceRecord/base/MaintenanceRecordFindManyArgs";
import { MaintenanceRecord } from "../../maintenanceRecord/base/MaintenanceRecord";
import { TechnicianService } from "../technician.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Technician)
export class TechnicianResolverBase {
  constructor(
    protected readonly service: TechnicianService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Technician",
    action: "read",
    possession: "any",
  })
  async _techniciansMeta(
    @graphql.Args() args: TechnicianCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Technician])
  @nestAccessControl.UseRoles({
    resource: "Technician",
    action: "read",
    possession: "any",
  })
  async technicians(
    @graphql.Args() args: TechnicianFindManyArgs
  ): Promise<Technician[]> {
    return this.service.technicians(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Technician, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Technician",
    action: "read",
    possession: "own",
  })
  async technician(
    @graphql.Args() args: TechnicianFindUniqueArgs
  ): Promise<Technician | null> {
    const result = await this.service.technician(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Technician)
  @nestAccessControl.UseRoles({
    resource: "Technician",
    action: "create",
    possession: "any",
  })
  async createTechnician(
    @graphql.Args() args: CreateTechnicianArgs
  ): Promise<Technician> {
    return await this.service.createTechnician({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Technician)
  @nestAccessControl.UseRoles({
    resource: "Technician",
    action: "update",
    possession: "any",
  })
  async updateTechnician(
    @graphql.Args() args: UpdateTechnicianArgs
  ): Promise<Technician | null> {
    try {
      return await this.service.updateTechnician({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Technician)
  @nestAccessControl.UseRoles({
    resource: "Technician",
    action: "delete",
    possession: "any",
  })
  async deleteTechnician(
    @graphql.Args() args: DeleteTechnicianArgs
  ): Promise<Technician | null> {
    try {
      return await this.service.deleteTechnician(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MaintenanceRecord], {
    name: "maintenanceRecords",
  })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceRecord",
    action: "read",
    possession: "any",
  })
  async findMaintenanceRecords(
    @graphql.Parent() parent: Technician,
    @graphql.Args() args: MaintenanceRecordFindManyArgs
  ): Promise<MaintenanceRecord[]> {
    const results = await this.service.findMaintenanceRecords(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
