/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Equipment as PrismaEquipment } from "@prisma/client";

export class EquipmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EquipmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.equipment.count(args);
  }

  async equipmentItems(
    args: Prisma.EquipmentFindManyArgs
  ): Promise<PrismaEquipment[]> {
    return this.prisma.equipment.findMany(args);
  }
  async equipment(
    args: Prisma.EquipmentFindUniqueArgs
  ): Promise<PrismaEquipment | null> {
    return this.prisma.equipment.findUnique(args);
  }
  async createEquipment(
    args: Prisma.EquipmentCreateArgs
  ): Promise<PrismaEquipment> {
    return this.prisma.equipment.create(args);
  }
  async updateEquipment(
    args: Prisma.EquipmentUpdateArgs
  ): Promise<PrismaEquipment> {
    return this.prisma.equipment.update(args);
  }
  async deleteEquipment(
    args: Prisma.EquipmentDeleteArgs
  ): Promise<PrismaEquipment> {
    return this.prisma.equipment.delete(args);
  }
}
