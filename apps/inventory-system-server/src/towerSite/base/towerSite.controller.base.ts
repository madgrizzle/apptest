/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TowerSiteService } from "../towerSite.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TowerSiteCreateInput } from "./TowerSiteCreateInput";
import { TowerSite } from "./TowerSite";
import { TowerSiteFindManyArgs } from "./TowerSiteFindManyArgs";
import { TowerSiteWhereUniqueInput } from "./TowerSiteWhereUniqueInput";
import { TowerSiteUpdateInput } from "./TowerSiteUpdateInput";
import { MaintenanceRecordFindManyArgs } from "../../maintenanceRecord/base/MaintenanceRecordFindManyArgs";
import { MaintenanceRecord } from "../../maintenanceRecord/base/MaintenanceRecord";
import { MaintenanceRecordWhereUniqueInput } from "../../maintenanceRecord/base/MaintenanceRecordWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TowerSiteControllerBase {
  constructor(
    protected readonly service: TowerSiteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TowerSite })
  @nestAccessControl.UseRoles({
    resource: "TowerSite",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTowerSite(
    @common.Body() data: TowerSiteCreateInput
  ): Promise<TowerSite> {
    return await this.service.createTowerSite({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TowerSite] })
  @ApiNestedQuery(TowerSiteFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TowerSite",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async towerSites(@common.Req() request: Request): Promise<TowerSite[]> {
    const args = plainToClass(TowerSiteFindManyArgs, request.query);
    return this.service.towerSites({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TowerSite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TowerSite",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async towerSite(
    @common.Param() params: TowerSiteWhereUniqueInput
  ): Promise<TowerSite | null> {
    const result = await this.service.towerSite({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TowerSite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TowerSite",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTowerSite(
    @common.Param() params: TowerSiteWhereUniqueInput,
    @common.Body() data: TowerSiteUpdateInput
  ): Promise<TowerSite | null> {
    try {
      return await this.service.updateTowerSite({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TowerSite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TowerSite",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTowerSite(
    @common.Param() params: TowerSiteWhereUniqueInput
  ): Promise<TowerSite | null> {
    try {
      return await this.service.deleteTowerSite({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/maintenanceRecords")
  @ApiNestedQuery(MaintenanceRecordFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceRecord",
    action: "read",
    possession: "any",
  })
  async findMaintenanceRecords(
    @common.Req() request: Request,
    @common.Param() params: TowerSiteWhereUniqueInput
  ): Promise<MaintenanceRecord[]> {
    const query = plainToClass(MaintenanceRecordFindManyArgs, request.query);
    const results = await this.service.findMaintenanceRecords(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        date: true,
        details: true,
        cost: true,

        towerSite: {
          select: {
            id: true,
          },
        },

        technician: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/maintenanceRecords")
  @nestAccessControl.UseRoles({
    resource: "TowerSite",
    action: "update",
    possession: "any",
  })
  async connectMaintenanceRecords(
    @common.Param() params: TowerSiteWhereUniqueInput,
    @common.Body() body: MaintenanceRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceRecords: {
        connect: body,
      },
    };
    await this.service.updateTowerSite({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/maintenanceRecords")
  @nestAccessControl.UseRoles({
    resource: "TowerSite",
    action: "update",
    possession: "any",
  })
  async updateMaintenanceRecords(
    @common.Param() params: TowerSiteWhereUniqueInput,
    @common.Body() body: MaintenanceRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceRecords: {
        set: body,
      },
    };
    await this.service.updateTowerSite({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/maintenanceRecords")
  @nestAccessControl.UseRoles({
    resource: "TowerSite",
    action: "update",
    possession: "any",
  })
  async disconnectMaintenanceRecords(
    @common.Param() params: TowerSiteWhereUniqueInput,
    @common.Body() body: MaintenanceRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceRecords: {
        disconnect: body,
      },
    };
    await this.service.updateTowerSite({
      where: params,
      data,
      select: { id: true },
    });
  }
}
