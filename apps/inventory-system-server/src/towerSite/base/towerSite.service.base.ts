/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TowerSite as PrismaTowerSite,
  MaintenanceRecord as PrismaMaintenanceRecord,
} from "@prisma/client";

export class TowerSiteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TowerSiteCountArgs, "select">
  ): Promise<number> {
    return this.prisma.towerSite.count(args);
  }

  async towerSites(
    args: Prisma.TowerSiteFindManyArgs
  ): Promise<PrismaTowerSite[]> {
    return this.prisma.towerSite.findMany(args);
  }
  async towerSite(
    args: Prisma.TowerSiteFindUniqueArgs
  ): Promise<PrismaTowerSite | null> {
    return this.prisma.towerSite.findUnique(args);
  }
  async createTowerSite(
    args: Prisma.TowerSiteCreateArgs
  ): Promise<PrismaTowerSite> {
    return this.prisma.towerSite.create(args);
  }
  async updateTowerSite(
    args: Prisma.TowerSiteUpdateArgs
  ): Promise<PrismaTowerSite> {
    return this.prisma.towerSite.update(args);
  }
  async deleteTowerSite(
    args: Prisma.TowerSiteDeleteArgs
  ): Promise<PrismaTowerSite> {
    return this.prisma.towerSite.delete(args);
  }

  async findMaintenanceRecords(
    parentId: string,
    args: Prisma.MaintenanceRecordFindManyArgs
  ): Promise<PrismaMaintenanceRecord[]> {
    return this.prisma.towerSite
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .maintenanceRecords(args);
  }
}
